(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    151673,       3062]
NotebookOptionsPosition[    146284,       2951]
NotebookOutlinePosition[    148813,       3008]
CellTagsIndexPosition[    148733,       3003]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"1d6c9bde-665c-4a8a-9ab2-fd154779b0bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"emp", "=", 
  RowBox[{"EmpiricalDistribution", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.3", ",", "0.4", ",", "0.2", ",", "0.1"}], "}"}], "->", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "2", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.888975263772624*^9, 3.88897531391646*^9}, {
  3.888976394826932*^9, 3.8889764211289225`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"001a3d8c-0e9a-4ca2-a121-3d38a48aa6e1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DataDistribution",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {
                9.144604292850943, {0., 9.144604292850943}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAwBmIQ/Xmu+cn//+/vZ4CCC1M/TWa6cwfO38s482xKyU04
/7jcgZ2dbtfg/Je6ZtOXalyG802T9I879p2H8y+e+nxkr91JOL9Xun/Bj/RD
+2fNBIGT9p8WTNjrlLQdyr9pXzaPm8Nu+1I4/+nEnefMz7Taw/ht95KiXc6v
g/NfPvaf8/Dqbjhfw2XB8sCVR+B8JRNxGd0vp+D8f3Ojb6o8vgDnX14fY2xj
cwXO7xG4e2tC9HU43/RvoXDbvltw/kGLtpk7nt+F8+Ubwm+4rnpgb2IMAo/t
L2W5vN4c8QjO//7nwxKHV4/hfJGr6svnzn0K5y8KkQuQNHkO56tE5zbMPPQC
zp+33O3ny6JXcH7X7PsSkWxv4Py8q0yNM3a/hfPdptUV3Ml4D+d7/I9pnl/z
Ac7PvLb/047Qj3C+c2PT1kSFT3D+9PyPu3meI/jPG5Y+m7/vM5z/IXVnyqH2
L3D+11wh9rOJX+H8zZ6n/6TpfoOGz0v71xkGZsxfEXz51bcmt5/9DufzHHzi
Mnv6Dzj/609jqelFP+0hqeWDfUSZvvFUz19wfsmxrvlKQr/h/B5LbYMZrxH8
2AZtkbnb/sD5K7huWC+p/Qvnv99+sn1y6D84/52FtLqQ/H84v/a576f//3Hx
GRgA8dtlww==
              "], {{{}, {
                 GrayLevel[0.85], 
                 EdgeForm[None], 
                 GraphicsGroupBox[
                  
                  PolygonBox[{{7, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 
                   40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26,
                    25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 
                   11, 10, 9, 8}}]]}, {}, {}}, {{}, {}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 Opacity[1.], 
                 
                 LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
                  31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 
                  46, 47, 48, 49, 50}]}}}], AspectRatio -> 1, 
             Axes -> {False, False}, AxesLabel -> {None, None}, 
             AxesOrigin -> {0, 0}, Background -> GrayLevel[0.93], 
             BaseStyle -> {FontFamily -> "Arial"}, DisplayFunction -> 
             Identity, Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None, "AxesInFront" -> True}, 
             PlotRange -> {All, All}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{0, 0}, {0, 0.1}}, 
             Ticks -> {Automatic, Automatic}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Empirical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {
                9.144604292850943, {0., 9.144604292850943}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAwBmIQ/Xmu+cn//+/vZ4CCC1M/TWa6cwfO38s482xKyU04
/7jcgZ2dbtfg/Je6ZtOXalyG802T9I879p2H8y+e+nxkr91JOL9Xun/Bj/RD
+2fNBIGT9p8WTNjrlLQdyr9pXzaPm8Nu+1I4/+nEnefMz7Taw/ht95KiXc6v
g/NfPvaf8/Dqbjhfw2XB8sCVR+B8JRNxGd0vp+D8f3Ojb6o8vgDnX14fY2xj
cwXO7xG4e2tC9HU43/RvoXDbvltw/kGLtpk7nt+F8+Ubwm+4rnpgb2IMAo/t
L2W5vN4c8QjO//7nwxKHV4/hfJGr6svnzn0K5y8KkQuQNHkO56tE5zbMPPQC
zp+33O3ny6JXcH7X7PsSkWxv4Py8q0yNM3a/hfPdptUV3Ml4D+d7/I9pnl/z
Ac7PvLb/047Qj3C+c2PT1kSFT3D+9PyPu3meI/jPG5Y+m7/vM5z/IXVnyqH2
L3D+11wh9rOJX+H8zZ6n/6TpfoOGz0v71xkGZsxfEXz51bcmt5/9DufzHHzi
Mnv6Dzj/609jqelFP+0hqeWDfUSZvvFUz19wfsmxrvlKQr/h/B5LbYMZrxH8
2AZtkbnb/sD5K7huWC+p/Qvnv99+sn1y6D84/52FtLqQ/H84v/a576f//3Hx
GRgA8dtlww==
              "], {{{}, {
                 GrayLevel[0.85], 
                 EdgeForm[None], 
                 GraphicsGroupBox[
                  
                  PolygonBox[{{7, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 
                   40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26,
                    25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 
                   11, 10, 9, 8}}]]}, {}, {}}, {{}, {}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 Opacity[1.], 
                 
                 LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
                  31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 
                  46, 47, 48, 49, 50}]}}}], AspectRatio -> 1, 
             Axes -> {False, False}, AxesLabel -> {None, None}, 
             AxesOrigin -> {0, 0}, Background -> GrayLevel[0.93], 
             BaseStyle -> {FontFamily -> "Arial"}, DisplayFunction -> 
             Identity, Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None, "AxesInFront" -> True}, 
             PlotRange -> {All, All}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{0, 0}, {0, 0.1}}, 
             Ticks -> {Automatic, Automatic}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Empirical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Input dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"0", ",", "3"}], "}"}], "SummaryItem"]}]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  DataDistribution[
  "Empirical", {{0.30000000000000004`, 0.4000000000000001, 
    0.20000000000000004`, 0.10000000000000002`}, {0, 1, 2, 3}, False}, 1, 4],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.888976422489747*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"8582bd78-e4ab-4c7f-a98c-b5d51110b635"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PDF", "[", 
  RowBox[{"emp", ",", "x"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[28]:=",ExpressionUUID->"3d749cf4-158f-4fcc-a68d-f60db140a0c8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"0.30000000000000004`", " ", 
   RowBox[{"Boole", "[", 
    RowBox[{"0", "\[Equal]", "x"}], "]"}]}], "+", 
  RowBox[{"0.4000000000000001`", " ", 
   RowBox[{"Boole", "[", 
    RowBox[{"1", "\[Equal]", "x"}], "]"}]}], "+", 
  RowBox[{"0.20000000000000004`", " ", 
   RowBox[{"Boole", "[", 
    RowBox[{"2", "\[Equal]", "x"}], "]"}]}], "+", 
  RowBox[{"0.10000000000000002`", " ", 
   RowBox[{"Boole", "[", 
    RowBox[{"3", "\[Equal]", "x"}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.8889764298278084`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"4e36da63-e4da-4dfd-a70d-8add0342c18d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CDF", "[", 
  RowBox[{"emp", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{3.8889764631030807`*^9},
 CellLabel->"In[29]:=",ExpressionUUID->"4d9422e8-5d89-43ec-88ef-fedac2f2cf86"],

Cell[BoxData[
 RowBox[{
  RowBox[{"0.30000000000000004`", " ", 
   RowBox[{"Boole", "[", 
    RowBox[{"0", "\[LessEqual]", "x"}], "]"}]}], "+", 
  RowBox[{"0.4000000000000001`", " ", 
   RowBox[{"Boole", "[", 
    RowBox[{"1", "\[LessEqual]", "x"}], "]"}]}], "+", 
  RowBox[{"0.20000000000000004`", " ", 
   RowBox[{"Boole", "[", 
    RowBox[{"2", "\[LessEqual]", "x"}], "]"}]}], "+", 
  RowBox[{"0.10000000000000002`", " ", 
   RowBox[{"Boole", "[", 
    RowBox[{"3", "\[LessEqual]", "x"}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.888976464941366*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"031ce1a6-6ff3-4059-885f-2299d82acf12"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiscretePlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"PDF", "[", "emp", "]"}], "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
   RowBox[{"Frame", "->", "True"}], ",", 
   RowBox[{"PlotRange", "->", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0.5"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8889764874370303`*^9, 3.8889764961205597`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"2a57926c-ecde-43c1-af41-d7cc0d4e6078"],

Cell[BoxData[
 GraphicsBox[{{
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     TagBox[{
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], Opacity[0.2], 
        LineBox[{},
         VertexColors->None]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.012833333333333334`], AbsoluteThickness[1.6], Opacity[0.2], 
        LineBox[{{{0., 0.30000000000000004`}, {0., 0}}, {{1., 
           0.4000000000000001}, {1., 0}}, {{2., 0.20000000000000004`}, {
           2., 0}}, {{3., 0.10000000000000002`}, {3., 0}}},
         VertexColors->None]}},
      Annotation[#, "Charting`Private`Tag$29456#1"]& ]}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], {}, 
      PointBox[{{0., 0.30000000000000004`}, {1., 0.4000000000000001}, {2., 
       0.20000000000000004`}, {3., 0.10000000000000002`}}], {}},
     Annotation[#, "Charting`Private`Tag$29456#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{332.64000000000004`, Automatic},
  Method->{
   "MessagesHead" -> DiscretePlot, "AxisPadding" -> Scaled[0.02], 
    "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05]},
  PlotRange->{{0, 3.}, {0., 0.5}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8889764898425317`*^9, 3.888976497293897*^9}},
 CellLabel->"Out[31]=",ExpressionUUID->"01d6fd9c-7347-47c6-9713-566da18531ee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"CDF", "[", "emp", "]"}], "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "5"}], "}"}], ",", 
   RowBox[{"Frame", "->", "True"}], ",", 
   RowBox[{"PlotRange", "->", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1.5"}], "}"}]}], ",", " ", 
   RowBox[{"Filling", "->", "Bottom"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.88897651345418*^9, 3.88897651345418*^9}, {
  3.8889765451684976`*^9, 3.888976615280861*^9}, {3.8889767824768176`*^9, 
  3.888976791339316*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"f802093d-4c17-4550-83aa-18d7ed79b75f"],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1:eJxl1As021ccB/C/R4XUu516dvFoiK5skUY7q2TannoMrZrXzkG11YgxS+k6
VsWxI7pKhuZ4Gzkt2plSptmqLGoxo4YqR4vSDYulxCs1Sjat/O5pes/Jyfmc
m/v7f+/93fwtIz7zO62KYRj3/8/G96W7bs1y+WwLtjnOxHLcqS4ScHKydfPh
XX+DQ+i+B675/wW2PuhtsCdvDOzpSSo3MxgCD30+Qb6Q3Au+fZNBtcxtBTNW
k/o8b+aCOQ9GGs1tfqJRnDbGA9pbA7hT/NEucMWalfUqfgDM5JQw/VNGwKG1
rc/WOp+ChVPfFafmTIKnW5zC37kxDbYNXOquqZkB++7UL5RS52iMyI0xSYsd
xwItaAvgG15EPb7NEthDo/LYz+TnYFZZc5Sr879gwTj+gqnJKjji7C3TS9Zr
YFI1p/7YVjn4wFMsuzUeo//RtTEktDwjhg7xvAo4pTQqYy9TFVzUnS/ixKmB
k2JzpRYsdbD4hJ1xcMQWcObatPpopAZYIDkyqxuCA3/vFdeW4K5Jf9UNKa3H
TxRK9NICp//QKEv7AA+Oqu0/TnLbCh7RyKpJomqDje7rL6oRdcCpLq3rD0m6
4MQ1HZy/uR64r/7gdJaBPriDECm6nIPMvv1x+TjeABxuNRz6SRayvNHRbDfO
EJyiJu7iJSOb2uw/sQvbBk6KDVjEf4lcF/jbc7kceZnHUCuymIH7aeMo+Bav
9SO4od9V1XPfVbg/M2F3woIEbWD2N1fyYqol4LlTv2I2R6TQ79GL7GUNl3mw
iEuYitmxDg71EXaSltH9YH5F8Y2XoftBSDBJPDeG+kk2Hw5260X9dPUtMuju
QP00Oql37usmtD/h9Yfh93XR/9+jvS25YsddMFajQvYQpkP+dH06I6l0FuzK
2s0dTUP5EtRzrlbx0PPX9wQeHlm8DvUWS9cfE8rqYH2ZkOmNb0Hn4XSRbP1i
H9rfjBNRb1gb5a9wusyNzEB5azIn3k/k/gLucZexPiphgQfqC814RJTX8M+6
giaVOrTe20tibIaep2+XStGbRfkp9BafYkYBrOfXuVIGcCjvEM8z8MPJcqgn
qDUJeRKA6nXROsVV9ih//vkpYv09lP+WeaXAO1sILs7aP1sSwAabae3lndxS
D5Y0DB611Ub1LfkO7XZjKO9wcw4n9hHar2T8qA/32TV0HhmilZ6gMJiPm2zO
wNujeo6VYxPbX6B6Ip3iGHsS2q+BGY81NI7yUyYzvnA2RO9zaqvx7wWPuGBC
sczQGdcA7g162/QfNfS82jNRq/FNKO8Srt+DOlepnBesGW0fnSZD+VSDQ7bz
+1Jg3js1e2fZNlS/qTgt77gU1e+aP1RTmJgIfpUH9cdHEp0vkaL9yTyXA6r9
0P7cHNoee3Vng/mnB3sJbLS/lUJeu9ZCFfhTO4d3y8mRYN+FDpWyK+lgFtM2
KFqM8t3pXhEzNVF+Vk7vWSstlE+5f8rnk+3y3vwhy0GXV/P33rivyueh3A/l
943y+Sjfj82u0DNf/n5m0xj9ScHGENMU69gvv8cgvyKvIg+c52ZehRV5lO+P
woo8r89rgl9/n2PYf4EyVgw=
    "], {{{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[{
         PolygonBox[{{84, 138, 139, 59, 69, 25, 58, 24, 23, 22, 21, 20, 19, 
          57, 18, 73, 56, 99}}], 
         PolygonBox[{{96, 136, 137, 111, 121, 94, 105, 68, 79, 17, 55, 16, 15,
           14, 13, 12, 11, 54, 10, 72, 53, 83, 67, 112}}], 
         PolygonBox[{{113, 142, 143, 50, 64, 49, 48, 47, 46, 45, 44, 43, 42, 
          41, 40, 39, 38, 37, 36, 35, 63, 34, 87, 75, 123}}], 
         PolygonBox[{{104, 140, 141, 98, 108, 82, 93, 62, 70, 33, 61, 32, 31, 
          30, 29, 28, 27, 60, 26, 86, 74, 97, 81, 110, 92, 
          122}}]}]}, {}, {}}, {{}, {}, 
      TagBox[
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        Opacity[1.], 
        LineBox[{1, 114, 100, 88, 76, 65, 51, 2, 3, 4, 5, 6, 7, 8, 115, 101, 
         89, 77, 66, 52, 117, 103, 91, 80, 71, 118, 106, 95, 85, 9, 116, 102, 
         90, 120, 109, 78, 119, 107}], 
        LineBox[{96, 112, 67, 83, 53, 72, 10, 54, 11, 12, 13, 14, 15, 16, 55, 
         17, 79, 68, 105, 94, 121, 111}], 
        LineBox[{84, 99, 56, 73, 18, 57, 19, 20, 21, 22, 23, 24, 58, 25, 69, 
         59}], LineBox[{104, 122, 92, 110, 81, 97, 74, 86, 26, 60, 27, 28, 29,
          30, 31, 32, 61, 33, 70, 62, 93, 82, 108, 98}], 
        LineBox[{113, 123, 75, 87, 34, 63, 35, 36, 37, 38, 39, 40, 41, 42, 43,
          44, 45, 46, 47, 48, 49, 64, 50}]},
       Annotation[#, "Charting`Private`Tag$33063#1"]& ], 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], 
       LineBox[{125, 126, 124}], LineBox[{128, 135, 127}], 
       LineBox[{130, 134, 129}], LineBox[{132, 133, 131}]}}}], {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{342.24000000000007`, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}, "AxesInFront" -> True},
  PlotRange->{{-0.9999998775510204, 4.99999987755102}, {0., 1.5}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.8889765152518854`*^9, {3.888976550255402*^9, 3.888976616315683*^9}, {
   3.8889767842247896`*^9, 3.8889767921974845`*^9}},
 CellLabel->"Out[39]=",ExpressionUUID->"961ee508-19d2-4a62-b8bd-b431fb86b314"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"b9717d0d-4727-4a2e-8465-35dd4c577590"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0.3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0.4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0.2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "0.1"}], "}"}]}], "}"}], ",", 
   RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Scientific\>\""}], ",", 
   RowBox[{"ImageSize", "->", "Large"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0.5"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8547521460059195`*^9, 3.8547523753954983`*^9}, {
  3.854752424589957*^9, 3.8547524349161053`*^9}, {3.8547524864545107`*^9, 
  3.8547525237240343`*^9}, {3.8547525751379805`*^9, 3.8547526985620823`*^9}, {
  3.8548446827981277`*^9, 3.8548447040346427`*^9}, {3.854845642571464*^9, 
  3.8548456537416124`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"0be63071-f451-44e0-9f2a-739ecb0a8719"],

Cell[BoxData[
 GraphicsBox[{{}, 
   GraphicsComplexBox[{{0., 0.3}, {1., 0.4}, {2., 0.2}, {3., 0.1}, {0., 0.}, {
    1., 0.}, {2., 0.}, {3., 0.}, {0., 0.3}, {1., 0.4}, {2., 0.2}, {3., 
    0.1}}, {{{}, {}, {}, {}, 
      {RGBColor[0.9, 0.36, 0.054], Opacity[0.3], LineBox[{5, 1}], 
       LineBox[{6, 2}], LineBox[{7, 3}], LineBox[{8, 4}]}}, 
     {RGBColor[0.9, 0.36, 0.054], PointSize[0.012833333333333334`], 
      AbsoluteThickness[1.6], CapForm["Butt"], 
      PointBox[{9, 10, 11, 12}]}}], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->Automatic,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{{0}, {0}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  LabelStyle->{FontFamily -> "Times"},
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{-1, 4}, {0, 0.5}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.854752281389776*^9, 3.8547523104502172`*^9}, 
   3.854752355426078*^9, 3.8547524451840005`*^9, 3.854752491027209*^9, 
   3.8547525934572763`*^9, {3.854752672928599*^9, 3.8547527000153327`*^9}, 
   3.8548447715862103`*^9, {3.85484564768112*^9, 3.854845654628581*^9}},
 CellLabel->"Out[20]=",ExpressionUUID->"3c21b4b4-5b84-43ba-92a8-0a20fbb48b1e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"4601d320-861e-402d-8f01-aac4ff93aa6b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x", "]"}], ":=", 
  RowBox[{"Piecewise", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"y", "=", "0"}], ",", 
       RowBox[{"x", "<", "0"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"y", "=", "0.3"}], ",", 
       RowBox[{"0", "\[LessEqual]", "x", "<", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"y", "=", "0.7"}], ",", 
       RowBox[{"1", "\[LessEqual]", "x", "<", "2"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"y", "=", "0.9"}], ",", 
       RowBox[{"2", "\[LessEqual]", "x", "<", "3"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"y", "=", "1"}], ",", 
       RowBox[{"x", "\[GreaterEqual]", "3"}]}], "}"}]}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8547946743981557`*^9, 3.854794714445825*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"4afa747b-9396-441b-b0d8-beba2f92420e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Legended", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"f", "[", "x", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "6"}], ",", "6"}], "}"}], ",", 
     RowBox[{"PlotTheme", "->", "\"\<Scientific\>\""}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
     RowBox[{"ExclusionsStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Dotted", ",", " ", "Black"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"f", "[", "x", "]"}]}], "]"}]], "Input",
 CellMargins:>
  Dynamic[{{
    0.135 FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}], 0.03 
     FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}]}, {
    0.019543601304347825` FrontEnd`AbsoluteCurrentValue[{WindowSize, 2}], 
     0.08664421552795032 FrontEnd`AbsoluteCurrentValue[{WindowSize, 2}]}}],
 CellChangeTimes->{{3.8248974785664105`*^9, 3.8248974995326667`*^9}, {
   3.854625440838091*^9, 3.8546254609480915`*^9}, {3.854691514113135*^9, 
   3.8546915883645363`*^9}, {3.85469162446108*^9, 3.8546916371446033`*^9}, {
   3.8546916673930993`*^9, 3.8546917051070695`*^9}, {3.8546917786737127`*^9, 
   3.8546917792604933`*^9}, {3.8547530234099693`*^9, 3.85475305018708*^9}, 
   3.8547531228173227`*^9, 3.8547946895837793`*^9, {3.854794749982629*^9, 
   3.8547948958918877`*^9}, {3.854794956134345*^9, 3.8547949692578893`*^9}, {
   3.8547950021348763`*^9, 3.8547950156979084`*^9}, {3.8547951015037208`*^9, 
   3.8547951339098787`*^9}, {3.8548447327902136`*^9, 
   3.8548447475770683`*^9}, {3.8548447806172433`*^9, 
   3.8548448623432455`*^9}, {3.8548449330539484`*^9, 3.8548449600192623`*^9}, 
   3.8548450393012247`*^9, {3.854845173211878*^9, 3.8548452020580397`*^9}, {
   3.8548453179338408`*^9, 3.854845343609004*^9}, {3.8548453796973286`*^9, 
   3.8548454239063864`*^9}, {3.8548455060807514`*^9, 
   3.8548455228599124`*^9}, {3.8548455870162888`*^9, 3.8548455890709257`*^9}},
 NumberMarks->False,
 CellLabel->"In[18]:=",ExpressionUUID->"21aff0b0-20d1-4716-a0a1-9bb961b833c9"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{{}, {}, 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.9, 0.36, 0.054], 
          CapForm["Butt"], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJxFz2lI0wEABfA1U3KNaW5ajZjH2HJLWodjoK0DRswvpRlzwhKZBzaU9cGK
rIyg1ByKG01sChbVZolOGWyY7RBzNJdNaC4MUmQ0aUU6ZHisZgX1/g8ej9/H
l61UX6ghk0ikgj/9u1XmrpXt7b0u0r8wYkxu4U/Cb84+V1zbIMxdGPN8XyUc
pgafzi8RvqISyi2ThJs5n1y1rYQNvWzdDI1w/2KbuiQ5A86YLT3PS0+H3xaX
SrwcBizlcRrZOXS4YFhh9AnS4K32Wvox3h44uv5MX3EwlfiTo8t3NNDgwsQ7
lkPVVPjhaZHozG0KXNUn/xLu3wX7TKzkHYYkmEUdOeq07oQpWSHf15dkuP7i
/Z6BARJcObnoZel+Of87Rxwvmbq7Cb+osyyNW6Owam1UoTFE4MPNieVJ7G8w
/YZ/d3dvEP5YXc83BwOw43OxyGokbJQJJfbLhBul8UvelTk4Na9Luxzzw0Vr
lo1Mxgf4asJ6R/aD97Ak6jQJUginLbdNiPUz8PA0M1r+5B0c0p5U6MamYXlW
Cz8h7IavN/E7PXoHfO7HasBstMNcpS2z2/YaniuSjCrnX8HH91f4Ywds8IKa
LVRIzXBH2Yg7VzUEnzgllkc1g7CBVnaz02eCZUPtEy7ZY5jCFxiZkT64blPq
seQ/gtk9t1JC41qY7Muricc1sL2hcvBIyz04si83OMVsggOt7q1ZuRr+DWIk
9wM=
          "]], 
         LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBmIQfa392K8LEfn2xmBw2X5mxdyvl682wPl3b2auX+jX
Aecb+zVOlFswGc4vX+/r/UZiNpzPYFl835l1KZzvMst+pmDdGjg/TS+n7dr2
rXD+qn4LhyUGe+H8it7+Z53nzsH5fZmN1xKarsP5vF98rNcEPobzy7ZwWghm
P4fzH5QcMylreQ3nz9+yu2NK+1s4P+7Lhjubut7D+VEeHw4+WYXgh87RXy52
GsGvsGTVX/4AwQcABKx6ag==
          "]], 
         LineBox[{{1.003826530612245, 0.7}, {1.0092612433721873`, 0.7}, {
          1.0171213274267141`, 0.7}, {1.0328414955357679`, 0.7}, {
          1.0485616636448216`, 0.7}, {1.080001999862929, 0.7}, {
          1.1114423360810366`, 0.7}, {1.2287426645580575`, 0.7}, {
          1.3460429930350784`, 0.7}, {1.6004563110758536`, 0.7}, {
          1.7192019537008325`, 0.7}, {1.8379475963258112`, 0.7}, {
          1.896151133930392, 0.7}, {1.9543546715349729`, 0.7}, {
          1.9689055559361182`, 0.7}, {1.9834564403372634`, 0.7}, {
          1.990731882537836, 0.7}, {1.996173469387755, 0.7}}], 
         LineBox[{{2.003826530612245, 0.9}, {2.0089204880392675`, 0.9}, {
          2.012558209139554, 0.9}, {2.041659977941844, 0.9}, {
          2.0707617467441346`, 0.9}, {2.197075152496663, 0.9}, {
          2.3233885582491913`, 0.9}, {2.5590933369634303`, 0.9}, {
          2.6868520568639167`, 0.9}, {2.814610776764403, 0.9}, {
          2.874259628516942, 0.9}, {2.933908480269481, 0.9}, {
          2.9637329061457502`, 0.9}, {2.9935573320220197`, 0.9}, {
          2.996173469387755, 0.9}}], 
         LineBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQvWijnck1dg4HBjD4YO/1VqQ6QhDB31h0YMFcBQRf
4kf2sUf6CP4zpsOCuX4I/lZeqdjvOQj+u8tzF9XHcML5arMUX7D7cMH5v8pa
/q4O5oHzX/+S5lthwQfnL0hvvyKtLADnT3A80yOpKgjn8+WvdjosKgTn73PZ
sXeblDCc/zc33iyMTwTOZ2S/NFP7L4Jv5lF0yItBDOGeO2teiH5C8PWOyb3h
qhSH85PXT3j//z+CDwDwVVno
          "]]}, Annotation[#, "Charting`Private`Tag$17348#1"]& ], {
        Dashing[{0, Small}], 
        LineBox[{{-0.003826530612244898, 0.}, {3.918367346938776*^-20, 
         0.15}, {0.003826530612244898, 0.3}}], 
        LineBox[{{1.996173469387755, 0.7}, {2., 0.7999999999999998}, {
         2.003826530612245, 0.9}}], 
        LineBox[{{2.996173469387755, 0.9}, {3., 0.9500000000000036}, {
         3.003826530612245, 1.}}], 
        LineBox[{{0.9961734693877551, 0.3}, {1., 0.4999999999999998}, {
         1.003826530612245, 0.7}}]}}, {{}, {
        Directive[
         GrayLevel[0]], 
        PointBox[{{3.003826530612245, 1.}, {0.003826530612244898, 
         0.3}, {-0.003826530612244898, 0.}, {2.996173469387755, 0.9}, {
         2.003826530612245, 0.9}, {1.996173469387755, 0.7}, {
         1.003826530612245, 0.7}, {0.9961734693877551, 0.3}}]}}}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {{0}, {0}}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {{0}, {0}}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> Large, 
     LabelStyle -> {FontFamily -> "Times"}, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None,
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{-6, 6}, {0., 1.}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TagBox[
      GridBox[{{"\[Piecewise]", 
         GridBox[{{"0", 
            RowBox[{"x", "<", "0"}]}, {"0.3`", 
            RowBox[{"0", "\[LessEqual]", "x", "<", "1"}]}, {"0.7`", 
            RowBox[{"1", "\[LessEqual]", "x", "<", "2"}]}, {"0.9`", 
            RowBox[{"2", "\[LessEqual]", "x", "<", "3"}]}, {"1", 
            RowBox[{"x", "\[GreaterEqual]", "3"}]}}, 
          ColumnAlignments -> {Left}, ColumnSpacings -> 1.2, ColumnWidths -> 
          Automatic, AllowedDimensions -> {2, Automatic}, Selectable -> True, 
          Editable -> True]}}, ColumnAlignments -> {Left}, ColumnSpacings -> 
       0.5, ColumnWidths -> Automatic], "Piecewise", SyntaxForm -> Equal, 
      SelectWithContents -> True, StripWrapperBoxes -> True, Selectable -> 
      False, Editable -> False, DeleteWithContents -> True], TraditionalForm],
     TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.824897320560685*^9, 3.8248975500417967`*^9, 3.8534788849356923`*^9, 
   3.8546254430652084`*^9, 3.8546254916820984`*^9, 3.8546915324526243`*^9, 
   3.854691632432046*^9, {3.8546916972165146`*^9, 3.8546917086177645`*^9}, 
   3.854691781834198*^9, {3.8547530265270023`*^9, 3.8547530583051567`*^9}, 
   3.854794822893321*^9, {3.85479486677713*^9, 3.8547948995570393`*^9}, {
   3.8547949601474524`*^9, 3.854794970907936*^9}, {3.854795002814031*^9, 
   3.8547950164468436`*^9}, {3.854844816035448*^9, 3.854844863175804*^9}, {
   3.8548449401790466`*^9, 3.8548449627375174`*^9}, 3.8548450423630486`*^9, 
   3.854845203599327*^9, {3.8548454005837574`*^9, 3.854845424668076*^9}, {
   3.8548455146364045`*^9, 3.8548455236797514`*^9}, 3.854845590485171*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"2e5f1d47-2c84-4718-acbd-1d122cd91a6d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar", "FirstSlide",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"3ac0a848-cb7e-4354-9fa6-542353cdef8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Evaluate", "[", 
  RowBox[{"f", "[", "x", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.854754823812747*^9, 3.854754823815115*^9}, {
  3.8548457790160093`*^9, 3.8548457918587837`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"df628305-fc89-4195-a0a0-433fdbe73131"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {"0", 
        RowBox[{"x", "<", "0"}]},
       {"0.3`", 
        RowBox[{"0", "\[LessEqual]", "x", "<", "1"}]},
       {"0.7`", 
        RowBox[{"1", "\[LessEqual]", "x", "<", "2"}]},
       {"0.9`", 
        RowBox[{"2", "\[LessEqual]", "x", "<", "3"}]},
       {"1", 
        RowBox[{"x", "\[GreaterEqual]", "3"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}},
      Selectable->True]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False,
  StripWrapperBoxes->True]], "Output",
 CellChangeTimes->{3.854754825122627*^9, 3.8548457926189003`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"9b881f6f-a0e1-4b0a-b93e-cd066364caec"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"333295a6-7451-4166-857c-23eddb48f562"],

Cell[CellGroupData[{

Cell["\<\
Piecewise[{{0, x < 0}, {0.3, 0 <= x < 1}, {0.7,  1 <= x < 2}, {0.9, 2 <= x < \
3}, {1, x >= 3}}]\
\>", "WolframAlphaLong",
 CellChangeTimes->{{3.8547549520493155`*^9, 3.8547549533205156`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"b9292d5d-7ba4-4458-b41f-c3b75c617cb3"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Piecewise[{{0, x < 0}, {0.3, 0 <= x < 1}, {0.7,  1 <= x < 2}, {0.9, 2 <= \
x < 3}, {1, x >= 3}}]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Piecewise[{{0, x < 0}, {0.3, 0 \[LessEqual] x < 1}, {0.7, 1 \
\[LessEqual] x < 2}, {0.9, 2 \[LessEqual] x < 3}, {1, x >= 3}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{"\[Piecewise]", 
                 GridBox[{{"0", 
                    RowBox[{"x", "<", "0"}]}, {"0.3`", 
                    RowBox[{"0", "\[LessEqual]", "x", "<", "1"}]}, {"0.7`", 
                    RowBox[{"1", "\[LessEqual]", "x", "<", "2"}]}, {"0.9`", 
                    RowBox[{"2", "\[LessEqual]", "x", "<", "3"}]}, {"1", 
                    RowBox[{"x", "\[GreaterEqual]", "3"}]}}, 
                  ColumnAlignments -> {Left}, ColumnSpacings -> 1.2, 
                  ColumnWidths -> Automatic, 
                  AllowedDimensions -> {2, Automatic}, Selectable -> True, 
                  Editable -> True]}}, ColumnAlignments -> {Left}, 
               ColumnSpacings -> 0.5, ColumnWidths -> Automatic], "Piecewise",
               SyntaxForm -> Span, SelectWithContents -> True, 
              StripWrapperBoxes -> True, Selectable -> False, Editable -> 
              False, DeleteWithContents -> True], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[Piecewise[{{0, x < 0}, {0.3, 0 \[LessEqual] x < 1}, {0.7, 1 \
\[LessEqual] x < 2}, {0.9, 2 \[LessEqual] x < 3}, {1, x >= 3}}, 0], {x, \
-0.24, 2.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max17312$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min17311$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min17311$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max17312$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$6175138$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min17311$\
6175143$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max17312$\
6175144$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max17312$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min17311$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$6175138$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min17311$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min17311$\
6175143$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max17312$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max17312$\
6175144$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$6175115[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Piecewise[{{0, $CellContext`x < 0}, {0.3, 
                    Inequality[0, LessEqual, $CellContext`x, Less, 1]}, {0.7, 
                    Inequality[1, LessEqual, $CellContext`x, Less, 2]}, {0.9, 
                    Inequality[2, LessEqual, $CellContext`x, Less, 3]}, {
                    1, $CellContext`x >= 3}}, 0], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min17311$$], 
                    (
                    Piecewise[{{
                    1. + 1.3256157598856246` Tan[1.5040801783846716` #], # < 
                    0}}, 1. + 
                    1.3256157598856249` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min17311$$], \
-0.24], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min17311$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max17312$$]], 
                    (
                    Piecewise[{{
                    1. + 1.3256157598856246` Tan[1.5040801783846716` #], # < 
                    0}}, 1. + 
                    1.3256157598856249` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min17311$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max17312$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min17311$$ + 
                    0.0024800000000000004`, 
                    CalculateUtilities`GraphicsUtilities`Private`max17312$$]],
                     2.24]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min17311$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max17312$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$6175115]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$6175115[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$6175115[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkTpe9gmJ0Y0xaUBJyvfeEiexcO1gO9vgz4PPbpJm7SrFdICm9MOpvjSP75577npPj0WQ9Hu9nr\
puzAfB4mQLT0+MGYlZLgoe75/lkihFBU+u4bM7xoRE7xEGP0jsfDeNeS/kDLQ7v8H3gUUFA02+\
asqopkRNDyTkGY1U7RlLemJ+MmUiAkZ/\
kmevhzuvhts7DgZjGYPWRHL1oi1knklQJOkh0A1j3jHg39zxcXn8VDAWku8F4RFRD413IiE2MIIDw3\
y8b73aTN3DxDTwGGR86TRZeY7aXqC0pDydkFmOb1xM1rAtMMhUOW7ul9ysU5AL/xY+\
EKGNyXls0vZsCfQL44rRd15W/5y7AZ7ftoWX4nQ1cZjfLkPeQNMTopbpfN66To6Rqmtt9HOuLmu+\
bDTIi6dM/b90RJVeDmO7bRhkdmxqvFp7y/Av28KLHLt+\
Lu4Hxnx2jhJw1XCoBPdRxAWbR9FMeeAk2j5dlRuHw7hb8R2i06eCFU5g4iz7xfbHowq83hRCrN10A9\
Lh9QwISE6MK7bc7tGU6lEGEiIDPL+\
uXzbZRNSheNzZvvaUx9QMMEfIuuUJzWGyUHfQUfblj4pbyeVckyHvh1yTlMi1or+\
N9ZGGXB5PhGckIV7Q1Ks3h1VSY5Desh+UIGEOnCIk/WU+9pt7uFgJpOpAorqkY3FgS3Pmn0S/\
LPAR4anOmju25+jyblvMJhCnteoCmiSL02ZzTPebTDduaA50XxJ8S+I/0LtNodsU/\
uqmsLQHd2tCtyZ0a0K3JnRrwv+7JtiI8V/pN9iTuIY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[Piecewise[{{0, x < 0}, {0.3, 0 \[LessEqual] x < 1}, {0.7, 1 \
\[LessEqual] x < 2}, {0.9, 2 \[LessEqual] x < 3}, {1, x >= 3}}, 0], {x, -3.2, \
5.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max17314$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min17313$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min17313$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max17314$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$6175235$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min17313$\
6175236$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max17314$\
6175237$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max17314$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min17313$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$6175235$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min17313$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min17313$\
6175236$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max17314$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max17314$\
6175237$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$6175214[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Piecewise[{{0, $CellContext`x < 0}, {0.3, 
                    Inequality[0, LessEqual, $CellContext`x, Less, 1]}, {0.7, 
                    Inequality[1, LessEqual, $CellContext`x, Less, 2]}, {0.9, 
                    Inequality[2, LessEqual, $CellContext`x, Less, 3]}, {
                    1, $CellContext`x >= 3}}, 0], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min17313$$], 
                    (
                    Piecewise[{{
                    1. + 4.489988864128729 Tan[1.5040801783846716` #], # < 
                    0}}, 1. + 
                    4.489988864128729 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min17313$$], \
-3.2], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min17313$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max17314$$]], 
                    (
                    Piecewise[{{
                    1. + 4.489988864128729 Tan[1.5040801783846716` #], # < 
                    0}}, 1. + 4.489988864128729 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min17313$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max17314$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min17313$$ + 
                    0.008400000000000001, 
                    CalculateUtilities`GraphicsUtilities`Private`max17314$$]],
                     5.2]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min17313$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max17314$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$6175214]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$6175214[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$6175214[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkVYGfEJidGNMGlCS8r23xEksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu97TYxEk/\
V6vp64b80GwONnC0xNjRmKWi4LH+2e5JEpRwZNr+OyOMSHRe4TBDxI7301j3gs5A+3Ob/\
B9YFHBQJOvmjKqKVHTAwl5RiNVe8aSnpifTJmIgNGf5Nmr7dcvh8MdB4OxjEFrIrl60RYyzyQokvQQ\
6IYx7xjwb+74uDx+KhgLyfeC8Iioh8Y7kRAbGMGBYT7et15tpu5hYhp4DDK+\
dJqsPEdtL1BaUp5OyCzHNy4ma7stMMhUOW7ul9ysU5AL/xY+EKGNyXls0vZsCfQL44rRd15W/\
5y7AZ7ftoWX4nQ1cZjfLkPeQNMTopbpfN66To6Rqmtt9HOuLmu+bDTIi6dM/\
b90RJVeDmPYNgwyOzY1Xq29ZfidtvAix66fi/uBMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5WfIfo9KlghROYOMt+\
sf3xqAKvN4UQazfdgHR4PQMCkhPjii23ezSlepSBhMgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5gs1B10lH35o+\
JWcjnXZMj7IdckJXKt6G9jfaQhl8cT4RlJiBc09erNYZXUGKS37AclSJgDpwhJf5mP/\
eYeLlYCqTqQqC7pWBzY0pz5J9EvC3xEeKqz5o7tObq82xazCcRprbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DeUOuHY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[Piecewise[{{0, x < 0}, {0.3, 0 \[LessEqual] x < 1}, \
{0.7, 1 \[LessEqual] x < 2}, {0.9, 2 \[LessEqual] x < 3}, {1, x >= 3}}, \
0]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{"\[Piecewise]", 
                GridBox[{{"0.3`", 
                   RowBox[{"0", "\[LessEqual]", "x", "<", "1"}]}, {"0.7`", 
                   RowBox[{"1", "\[LessEqual]", "x", "<", "2"}]}, {"0.9`", 
                   RowBox[{"2", "\[LessEqual]", "x", "<", "3"}]}, {"1", 
                   RowBox[{"x", "\[GreaterEqual]", "3"}]}}, 
                 ColumnAlignments -> {Left}, ColumnSpacings -> 1.2, 
                 ColumnWidths -> Automatic, 
                 AllowedDimensions -> {2, Automatic}, Selectable -> True, 
                 Editable -> True]}}, ColumnAlignments -> {Left}, 
              ColumnSpacings -> 0.5, ColumnWidths -> Automatic], "Piecewise", 
             SyntaxForm -> Span, SelectWithContents -> True, 
             StripWrapperBoxes -> True, Selectable -> False, Editable -> 
             False, DeleteWithContents -> True], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming x is positive", "scanner" -> 
     "Simplification", "id" -> "PositiveAlternateForm", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[Piecewise[{{0, x < 0}, {0.3, 0 \[LessEqual] x < 1}, \
{0.7, 1 \[LessEqual] x < 2}, {0.9, 2 \[LessEqual] x < 3}, {1, x >= 3}}, 0], x \
> 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{"\[Piecewise]", 
                GridBox[{{"0.3`", 
                   RowBox[{"x", "<", "1"}]}, {"0.7`", 
                   RowBox[{"1", "\[LessEqual]", "x", "<", "2"}]}, {"0.9`", 
                   RowBox[{"2", "\[LessEqual]", "x", "<", "3"}]}, {"1", 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"otherwise\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, ColumnAlignments -> {Left}, ColumnSpacings -> 1.2, 
                 ColumnWidths -> Automatic, 
                 AllowedDimensions -> {2, Automatic}, Selectable -> True, 
                 Editable -> True]}}, ColumnAlignments -> {Left}, 
              ColumnSpacings -> 0.5, ColumnWidths -> Automatic], "Piecewise", 
             SyntaxForm -> Span, SelectWithContents -> True, 
             StripWrapperBoxes -> True, Selectable -> False, Editable -> 
             False, DeleteWithContents -> True], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "4", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.311", "parsetiming" -> "0.9410000000000001", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP79521hd5a509d14eig100000243i9d1ibf074g76", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "12", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa79531hd5a509d14eig10000028112e7c6916a9g7822558548030476863", "version" -> 
    "2.6", "inputstring" -> 
    "Piecewise[{{0, x < 0}, {0.3, 0 <= x < 1}, {0.7,  1 <= x < 2}, {0.9, 2 <= \
x < 3}, {1, x >= 3}}]"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 2, 25, 6, 15, 57.0111955`9.508534981756988}, "Line" -> 7,
     "SessionID" -> 18715113307940502246}, Typeset`showpods$$ = {1, 2, 3, 4}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "Piecewise[{{0, x < 0}, {0.3, 0 <= x < 1}, {0.7,  1 <= x < 2}, {0.9, 2 <= \
x < 3}, {1, x >= 3}}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{515., {351.09699715441093`, 355.90300284558907`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellMargins:>
  Dynamic[{{
    0.06752541184717842 FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}], 
     0.008762705923589204 FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}]}, {
    0.013703323055841042` FrontEnd`AbsoluteCurrentValue[{WindowSize, 2}], 
     0.025693730729701953` FrontEnd`AbsoluteCurrentValue[{WindowSize, 2}]}}],
 CellChangeTimes->{
  3.8547549570448294`*^9},ExpressionUUID->"a8fa4d70-c0eb-42bf-b1c4-\
e8b737b8ccb9"]
}, Open  ]]
}, Open  ]]
},
ScreenStyleEnvironment->"Slideshow Working",
WindowSize->{574.8, 573.6},
WindowMargins->{{Automatic, -4.7999999999999545`}, {Automatic, 0}},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> False}, "TryRealOnly" -> False, 
  "PresenterSettings" -> {
   "SlideBreakStyles" -> {}, "ShowSlideBreaks" -> True, 
    "Dialogs" -> {"SlideBreakDefaults" -> 0}, "WindowSize" -> {1141.2, 579.6},
     "WindowMargins" -> {{-5.3999999999999995`, 
     5.400000000000091}, {-10.799999999999955`, 0.}}, "ShowNavigationBar" -> 
    True, "UserModifications" -> {{
      "Print", CellMargins :> 
       Dynamic[{{
          0.06752541184717842 FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}], 
           0.008762705923589204 
           FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}]}, {
          0.013703323055841042` 
           FrontEnd`AbsoluteCurrentValue[{WindowSize, 2}], 
           0.025693730729701953` 
           FrontEnd`AbsoluteCurrentValue[{WindowSize, 2}]}}]}, {
      "Input", CellMargins :> 
       Dynamic[{{
          0.135 FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}], 0.03 
           FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}]}, {
          0.019543601304347825` 
           FrontEnd`AbsoluteCurrentValue[{WindowSize, 2}], 
           0.08664421552795032 
           FrontEnd`AbsoluteCurrentValue[{WindowSize, 2}]}}]}}}},
FrontEndVersion->"13.2 for Microsoft Windows (64-bit) (January 30, 2023)",
StyleDefinitions->FrontEnd`FileName[{"PresenterTools"}, "Default.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"2001f553-d34b-4564-8e21-f7f52fd96141"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[580, 22, 122, 2, 61, "SlideShowNavigationBar",ExpressionUUID->"1d6c9bde-665c-4a8a-9ab2-fd154779b0bb",
   CellTags->"SlideShowHeader"],
  Cell[23167, 535, 122, 2, 61, "SlideShowNavigationBar",ExpressionUUID->"b9717d0d-4727-4a2e-8465-35dd4c577590",
   CellTags->"SlideShowHeader"],
  Cell[26358, 621, 122, 2, 61, "SlideShowNavigationBar",ExpressionUUID->"4601d320-861e-402d-8f01-aac4ff93aa6b",
   CellTags->"SlideShowHeader"],
  Cell[37581, 860, 136, 2, 61, "SlideShowNavigationBar",ExpressionUUID->"3ac0a848-cb7e-4354-9fa6-542353cdef8d",
   CellTags->"SlideShowHeader"],
  Cell[39697, 926, 122, 2, 61, "SlideShowNavigationBar",ExpressionUUID->"333295a6-7451-4166-857c-23eddb48f562",
   CellTags->"SlideShowHeader"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 147987, 2989}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 122, 2, 61, "SlideShowNavigationBar",ExpressionUUID->"1d6c9bde-665c-4a8a-9ab2-fd154779b0bb",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[727, 28, 469, 10, 29, "Input",ExpressionUUID->"001a3d8c-0e9a-4ca2-a121-3d38a48aa6e1"],
Cell[1199, 40, 10038, 200, 59, "Output",ExpressionUUID->"8582bd78-e4ab-4c7f-a98c-b5d51110b635"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11274, 245, 181, 4, 29, "Input",ExpressionUUID->"3d749cf4-158f-4fcc-a68d-f60db140a0c8"],
Cell[11458, 251, 620, 15, 29, "Output",ExpressionUUID->"4e36da63-e4da-4dfd-a70d-8add0342c18d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12115, 271, 204, 4, 29, "Input",ExpressionUUID->"4d9422e8-5d89-43ec-88ef-fedac2f2cf86"],
Cell[12322, 277, 634, 15, 29, "Output",ExpressionUUID->"031ce1a6-6ff3-4059-885f-2299d82acf12"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12993, 297, 497, 12, 30, "Input",ExpressionUUID->"2a57926c-ecde-43c1-af41-d7cc0d4e6078"],
Cell[13493, 311, 3893, 96, 230, "Output",ExpressionUUID->"01d6fd9c-7347-47c6-9713-566da18531ee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17423, 412, 657, 16, 46, "Input",ExpressionUUID->"f802093d-4c17-4550-83aa-18d7ed79b75f"],
Cell[18083, 430, 5035, 99, 231, "Output",ExpressionUUID->"961ee508-19d2-4a62-b8bd-b431fb86b314"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[23167, 535, 122, 2, 61, "SlideShowNavigationBar",ExpressionUUID->"b9717d0d-4727-4a2e-8465-35dd4c577590",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[23314, 541, 1166, 29, 46, "Input",ExpressionUUID->"0be63071-f451-44e0-9f2a-739ecb0a8719"],
Cell[24483, 572, 1826, 43, 380, "Output",ExpressionUUID->"3c21b4b4-5b84-43ba-92a8-0a20fbb48b1e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[26358, 621, 122, 2, 61, "SlideShowNavigationBar",ExpressionUUID->"4601d320-861e-402d-8f01-aac4ff93aa6b",
 CellTags->"SlideShowHeader"],
Cell[26483, 625, 971, 28, 46, "Input",ExpressionUUID->"4afa747b-9396-441b-b0d8-beba2f92420e"],
Cell[CellGroupData[{
Cell[27479, 657, 2046, 38, 91, "Input",ExpressionUUID->"21aff0b0-20d1-4716-a0a1-9bb961b833c9"],
Cell[29528, 697, 8004, 157, 379, "Output",ExpressionUUID->"2e5f1d47-2c84-4718-acbd-1d122cd91a6d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[37581, 860, 136, 2, 61, "SlideShowNavigationBar",ExpressionUUID->"3ac0a848-cb7e-4354-9fa6-542353cdef8d",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[37742, 866, 287, 5, 29, "Input",ExpressionUUID->"df628305-fc89-4195-a0a0-433fdbe73131"],
Cell[38032, 873, 1616, 47, 100, "Output",ExpressionUUID->"9b881f6f-a0e1-4b0a-b93e-cd066364caec"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[39697, 926, 122, 2, 61, "SlideShowNavigationBar",ExpressionUUID->"333295a6-7451-4166-857c-23eddb48f562",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[39844, 932, 280, 5, 40, "WolframAlphaLong",ExpressionUUID->"b9292d5d-7ba4-4458-b41f-c3b75c617cb3"],
Cell[40127, 939, 106129, 2008, 731, "Print",ExpressionUUID->"a8fa4d70-c0eb-42bf-b1c4-e8b737b8ccb9"]
}, Open  ]]
}, Open  ]]
}
]
*)

